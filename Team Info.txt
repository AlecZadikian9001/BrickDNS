= GENERAL INFO (*EVERYONE* READ THIS) ========
//

Cal Hacks Project: BrickDNS (server/client)

Members: Alec, Austin, Rodger, Brian, Jeff

Purpose: The purpose of the BrickDNS server is to map any pair of geo coordinates on Earth (down to precision of one ten thousandth of a degree) to some *short*, grammatically correct sentence that may be easily memorized, communicated, etc. by a human and can be mapped back to geo coordinates using the BrickDNS server. For example, the geo coordinates of Ehrman Hall may be mapped to “the dog walks alone”, and then it can map “the dog walks alone” back to the geo coordinates of Ehrman Hall. As a bonus feature to be added later, “brick domain names” may be registered so that any word or words (for example, “Apple HQ”) *that are not already mapped to a location* may be mapped to any location.

Roles:
Alec - Team captain, head developer of server side framework, director of server side.
Austin - Head developer of English sentence generation algorithm (for server side).
Rodger - Web and Python developer (for front end).
Brian - Python developer (for front end).
Jeff - Python developer (for front end).
Who wants to be the director of client side? Whoever it is will be responsible for making sure you three get your side working in time!

Project Structure:
- All version-tracked in git and stored on GitHub.
- Xcode C project for server side.
- ??? for client side (MAMP folder might be best).
- FreeBSD virtual machine server to host anything we need.
- Group Facebook chat for team communication.

\\

= FRONT END ========
//

- Some kind of website with text boxes or whatever where users may enter geo coordinates and get the sentence from those coordinates. Choosing coordinates by placing a pin on a Google map would be great. Will also do the opposite, converting sentences to geo coordinates.

- The site itself will not perform the conversion. Rather, it’ll take user input then communicate with the server side to ask for the words for any given coordinates or the coordinates for any given words.

- To communicate with the server side, you guys have to figure out how to make the web server send and receive data over TCP/IP to/from the BrickDNS server when the user enters input. For this, you need to make what’s called a “dynamic website”. You can do this with Python, PHP, or other things. (See https://docs.python.org/2/howto/webservers.html for Python.)


Exact Technical Details for Communication with BrickDNS Server:

- Connect to TCP port 9001 on the server (IP address of server to be determined).
- All messages must be sent with a header preceding them to indicate their size. *Do not worry about the header!* Alec will write functions for you that add the header… unless y’all feel like learning about variable length values and low-level TCP operation. Just focus on making the messages and finding a way to send them over TCP port 9001 to the server.
- Format for sending a sentence and receiving coordinates: “2%s&%s&%s&%s”… The character ‘2’ followed by each word, separated with an ampersand (‘&’). Example: “2the&dog&walks&alone”.
- Response (from server) format for querying coordinates from sentence: “%d&%d”. The latitude, an ampersand (‘&’), then the longitude. Latitude will be a number from -9000000 to 9000000 (inclusive). Note that real life latitude actually goes from -90˚ to 90˚; you will need to divide the number by 10000 to get the real latitude. Longitude will be a number from -18000000 to 17999999 (inclusive). Similarly, longitude actually goes from -180˚ to 179.99999…˚, so you will need to divide by 10000. Example: “2342&-349623”.
- Format for sending coordinates and receiving sentence: “1%d&%d”. The character ‘1’ followed by latitude, ampersand, longitude. As described above, latitude will be a number from -9000000 to 9000000 (inclusive), longitude will be a number from -18000000 to 17999999 (inclusive), so do the appropriate calculations… Example: “12342&34945623” (the ‘1’ in the beginning is not part of the latitude).
- Response format for querying sentence based on coordinates: ”%s&%s&%s&%s”… Each word separated by ampersand. Example: “the&dog&walks&alone”.

Concise summary of examples:
request = “2the&dog&walks&alone” => response = “2342&14456231”
request = “12342&14456231”	 => response = “the&dog&walks&alone”
\\

= SERVER SIDE ========
//

- C server with thread pool, TCP sockets, configuration, blah blah blah… Alec is already working on this and doesn’t need to write it into the documentation. Almost all of it works already.

- Austin (and anyone who can help) needs to figure out how to map any inputted number within the interval [0, 648000035999999] to a grammatically correct sentence containing as *few* words as possible. That large second number is equal to 6.48000035999999E14, if that helps to know. It comes from combining the numbers of coordinates. This may be as big a task as setting up the server (or not), and Alec may need to help at least with the tech; we’ve got SQLite at our disposal. *Anyone with ideas for the algorithm is encouraged to speak up!*

\\

GLHF, team!